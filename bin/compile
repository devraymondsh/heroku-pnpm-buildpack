#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure the environment

set -o errexit  # always exit on error
set -o nounset  # fail on unset variables
set -o pipefail # don't ignore exit codes when piping output
unset GIT_DIR   # Avoid GIT_DIR leak from previous build steps

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BUILDPACK_DIR=$(
    cd "$(dirname "${0:-}")" || exit
    cd ..
    pwd
)
BIN_DIR="$BUILD_DIR/.heroku/bin"
DEFAULT_NODE_VERSION=18

mkdir -p "$BUILD_DIR/.heroku/bin/"

cd "$BUILD_DIR"

### Load Dependencies
# shellcheck disable=SC1091
source "$BUILDPACK_DIR/lib/environment.sh"
# shellcheck disable=SC1091
source "$BUILDPACK_DIR/lib/json.sh"
# shellcheck disable=SC1091
source "$BUILDPACK_DIR/lib/heroku.sh"

### Create and export environment variables
create_env() {
    write_profile "$BUILDPACK_DIR" "$BUILD_DIR"

    export_env_dir "$ENV_DIR"
}

create_env

### Install binaries needed for build
install_binaries() {
    package_json_path=$(find "$BUILD_DIR" -name "package.json" | head -n 1)
    node_engine=$(read_json "$package_json_path" ".engines.node")
    npm_engine=$(read_json "$package_json_path" ".engines.npm")

    curl -fsSL "https://fnm.vercel.app/install" | bash -s -- --install-dir "$BIN_DIR" --skip-shell

    export PATH=$BUILD_DIR/.heroku/bin:$PATH
    export NODE_OPTIONS=--max_old_space_size=4096

    eval "$(fnm env)"

    if [ -n "$node_engine" ]; then
        echo "-----> Install nodejs v$node_engine"

        fnm install "v$node_engine"
        fnm use "v$node_engine"
    else
        echo "-----> Install nodejs v$DEFAULT_NODE_VERSION"

        fnm install $DEFAULT_NODE_VERSION
        fnm use $DEFAULT_NODE_VERSION
    fi

    if [ -n "$npm_engine" ]; then
        echo "-----> Install npm v$npm_engine"

        npm install -g "npm@$npm_engine"
    else
        echo "-----> Use the default npm version"

        npm -v
    fi

    echo "-----> Install pnpm"
    curl -fsSL https://get.pnpm.io/install.sh | sh -

    pnpm config set store-dir "$CACHE_DIR"/.pnpm-store
}

install_binaries

echo "-----> Run prebuild"
run_prebuild "$BUILD_DIR"

echo "-----> Run build"
run_build "$BUILD_DIR"
